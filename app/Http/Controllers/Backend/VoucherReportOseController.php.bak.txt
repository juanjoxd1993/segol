<?php

namespace App\Http\Controllers\Backend;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Mail;
use Auth;
use DB;
use App\ClientAddress;
use App\Client;
use App\Company;
use App\CompanyAddress;
use App\Currency;
use App\CreditNoteReason;
use App\DocumentType;
use App\Payment;
use App\Unit;
use App\Voucher;
use App\VoucherDetail;
use App\VoucherType;
use App\Mail\VoucherMail;
use NumeroALetras\NumeroALetras;

class VoucherReportOseController extends Controller
{
    private $env = 'production';

    public function index() {
        $companies = Company::select('id','name')->get();
    	$voucher_types = VoucherType::select('id','name')->get();
        $current_date = date(DATE_ATOM, mktime(0, 0, 0));

        return view('backend.voucher_report_ose')->with(compact('companies','voucher_types','current_date'));
    }

    public function validateForm() {
        $messages = [
            'company_id.required'       => 'Debe seleccionar una Compañía.',
            'voucher_type.required'     => 'Debe seleccionar un Tipo de Documento.',
            'date_of_issue.required_if' => 'Debe seleccionar una Fecha de Emisión.',
            'serie.required_if'         => 'El Número de Serie es obligatorio.',
        ];

        $rules = [
            'company_id'        => 'required',
            'voucher_type'      => 'required',
            'date_of_issue'     => 'required_if:voucher_type,2',
            'serie'             => 'required_if:voucher_type,2',
        ];

        request()->validate($rules, $messages);

        return request()->all();
    }

    public function getVouchersTable() {
        // Obtener datos del formulario
        $company_id = request('model.company_id');
        $voucher_id = request('model.voucher_type');
        $serie = request('model.serie');
        $since_date = date_create(request('model.since_date'));
        $since_date = date_format($since_date, 'Y-m-d');
        $to_date = date_create(request('model.to_date'));
        $to_date = date_format($to_date, 'Y-m-d');
        $initial_number = request('model.initial_number');
        $final_number = request('model.final_number');
        $order_series = request('model.order_series');
        $order_number = request('model.order_number');

        $company = Company::where('id', $company_id)
            ->select('database_name')
            ->first();
        
        $voucher_type = VoucherType::where('id', $voucher_id)->first();

        if ( $voucher_type->type == '07' ) {
            $serie = $voucher_type->serie_type . sprintf('%02d', $serie);
        } else {
            $serie = $voucher_type->serie_type . sprintf('%03d', $serie);
        }
        
        $vouchers = Voucher::where('company_id', $company_id)
            ->where('voucher_type_id', $voucher_id)
            ->when($serie, function($vouchers, $serie) {
                return $vouchers->where('serie_number', $serie);
            })
            ->when($since_date, function($vouchers, $since_date) {
                return $vouchers->where('issue_date', '>=', $since_date);
            })
            ->when($to_date, function($vouchers, $to_date) {
                return $vouchers->where('issue_date', '<=', $to_date);
            })
            ->when($initial_number, function($vouchers, $initial_number) {
                return $vouchers->where('voucher_number', '>=', $initial_number);
            })
            ->when($final_number, function($vouchers, $final_number) {
                return $vouchers->where('voucher_number', '<=', $final_number);
            })
            ->when($order_series, function($vouchers, $order_series) {
                return $vouchers->where('order_series', $order_series);
            })
            ->when($order_number, function($vouchers, $order_number) {
                return $vouchers->where('order_number', $order_number);
            })
            ->orderBy('serie_number', 'DESC')
            ->orderBy('voucher_number', 'DESC')
            ->get();

        // Crear datos para la paginación de KT Datatable
        $meta = new \stdClass();
        $meta->page = 1;
        $meta->pages = 1;
        $meta->perpage = -1;
        $meta->total = $vouchers->count();
        $meta->field = 'RecordID';
        for ($i = 1; $i <= $vouchers->count() ; $i++) {
            $meta->rowIds[] = $i;
        }

        // Crear objetos de los elementos del query
        $objs = [];

        foreach ($vouchers as $key => $obj) {
            $aux = new \stdClass();

            $aux->RecordID = $key + 1;
            $aux->company_id = $company_id;

            $aux->client_address = (trim($obj->client_address) ? $obj->client_address : 'Lima - Lima - Perú');
            $aux->client_code = $obj->client->code;
            $aux->client_document_name = $obj->client->document_type->name;
            if ( $voucher_type->type == '03' && $obj->client->document_number == '' ) {
                $aux->client_document_number = '12345678';
            } else {
                $aux->client_document_number = $obj->client->document_number;
            }
            $aux->client_name = trim($obj->client->business_name);
            $aux->client_email = $obj->client->email;

            $aux->document_currency_id = $obj->currency->id;
            $aux->document_currency_symbol = $obj->currency->symbol;
            $aux->document_date_of_issue = date('d-m-Y', strtotime($obj->issue_date));
            $aux->document_expiration_date = ( $obj->expiry_date ? date('d-m-Y', strtotime($obj->expiry_date)) : '' );
            $aux->document_hour_of_issue = date('h:i:s', strtotime($obj->issue_hour));
            $aux->document_igv = abs($obj->igv);
            $aux->document_igv_percentage = $obj->igv_percentage * 100;
            $aux->document_serie_number = $obj->serie_number;
            $aux->document_subtotal = $obj->taxed_operation;
            $aux->document_order_series = $obj->order_series;
            $aux->document_order_number = $obj->order_number;
            $aux->document_payment_id = $obj->payment_id;
            $aux->document_payment_name = $obj->payment->name;
            if ( $voucher_type->type == '01' && $obj->igv_perception > 0 && $company_id == 1 ) {
                if ( $obj->payment_id != 1 && $obj->client->document_number == '20536075195' ) {
                    $aux->document_perception = '';
                } else {
                    $aux->document_perception = $obj->igv_perception;
                }
                
                $aux->document_perception_percentage = $obj->igv_perception_percentage;
            } else {
                $aux->document_perception = '';
                $aux->document_perception_percentage = '';
            }

            if ( $voucher_type->type == '07' ) {
                $aux->document_reference_number = $obj->credit_note_reference_number;
                $aux->document_reference_reason_name = $obj->credit_note_reason->name;
                $aux->document_reference_reason_type = $obj->credit_note_reason->type;
                $aux->document_reference_serie = $obj->credit_note_reference_serie;
            } else {
                $aux->document_reference_number = '';
                $aux->document_reference_reason_name = '';
                $aux->document_reference_reason_type = '';
                $aux->document_reference_serie = '';
            }
            $aux->document_total = $obj->total;
            $aux->document_voucher_type = $voucher_type->type;
            $aux->document_voucher_number = $obj->voucher_number;

            $objs[$key] = $aux;
        }

        return response()->json([
            'meta' => $meta,
            'data' => $objs,
        ]);
    }

    public function get_voucher_detail() {
        $objs = [];

        $details = request('element_details');
        foreach ($details as $detail) {
            $company = Company::where('id', $detail['company_id'])
                ->select('database_name')
                ->first();

            $query = DB::connection($company->database_name)
                ->table('DetalleFacturacionMarket')
                ->where('TipoDocumento', $detail['document_voucher_reference'])
                ->where('NumSerie', $detail['document_serie_number'])
                ->where('NumeroDocumento', $detail['document_voucher_number'])
                ->where('Estado', 1)
                ->select('Cantidad','PrecioUnitario','ValorVenta','IGV','CodArticulo','PIgv')
                ->get();

            $element_details = [];

            foreach ($query as $key => $obj) {
                $article = DB::connection($company->database_name)
                    ->table('MaestroArticulo')
                    ->where('CodArticulo', $obj->CodArticulo)
                    ->select('NombreArticulo','CodUnidad')
                    ->get();

                $unit = Unit::where('reference', $article[0]->CodUnidad)
                    ->select('name','short_name')
                    ->first();

                $detail_igv = number_format(abs($obj->ValorVenta) * 0.18, 2);
                $detail_price = number_format(abs($obj->ValorVenta) / abs($obj->Cantidad), 4);
                $detail_price_igv = number_format($detail_price * 1.18, 2);
                $detail_subtotal = number_format(abs($obj->ValorVenta), 2, '.', '');

                $aux = new \stdClass();
                $aux->detail_name = $article[0]->NombreArticulo;
                $aux->detail_igv = $detail_igv;
                $aux->detail_price = $detail_price;
                $aux->detail_price_igv = $detail_price_igv;
                $aux->detail_quantity = number_format(abs($obj->Cantidad), 4);
                $aux->detail_subtotal = number_format($detail_subtotal, 2);
                $aux->detail_total = number_format($detail_subtotal * 1.18, 2);
                $aux->detail_unit_name = ( $unit ? $unit->name : '' );
                $element_details[] = $aux;
            }

            $main_aux = new \stdClass();

            $main_aux->title = $detail['document_serie'].'-'.$detail['document_voucher_number'];
            $main_aux->element_details = $element_details;
        }

        $objs[] = $main_aux;

        return $objs;
    }

    public function sendVoucher() {
        $main_obj = [];
        $response = [];

        $elements = request('elements');
        $task = request('task');

        foreach ($elements as $element) {
            $client_address = $element['client_address'];
            $client_code = $element['client_code'];
            $client_document_name = $element['client_document_name'];
            $client_document_number = $element['client_document_number'];
            $client_email = $element['client_email'];
            $client_name = $element['client_name'];
            $company_id = $element['company_id'];
            $document_currency_id = $element['document_currency_id'];
            $document_date_of_issue = date('Y-m-d', strtotime($element['document_date_of_issue']));
            $document_expiration_date = $element['document_expiration_date'];
            $document_hour_of_issue = $element['document_hour_of_issue'];
            $document_igv = $element['document_igv'];
            $document_igv_percentage = $element['document_igv_percentage'];
            $document_order_number = $element['document_order_number'];
            $document_order_serie = $element['document_order_serie'];
            $document_payment_name = $element['document_payment_name'];
            $document_payment_id = $element['document_payment_id'];
            $document_perception = $element['document_perception'];
            $document_perception_percentage = $element['document_perception_percentage'];
            $document_reference_number = $element['document_reference_number'];
            $document_reference_reason_name = $element['document_reference_reason_name'];
            $document_reference_reason_type = $element['document_reference_reason_type'];
            $document_reference_serie = $element['document_reference_serie'];
            $document_serie = $element['document_serie'];
            $document_serie_number = $element['document_serie_number'];
            $document_subtotal = $element['document_subtotal'];
            $document_total = str_replace(',', '', $element['document_total']);
            $document_voucher_number = $element['document_voucher_number'];
            $document_voucher_reference = $element['document_voucher_reference'];

            $company = Company::where('id', $company_id)
                ->select('document_type_id','document_number','name','short_name','bizlinks_user','bizlinks_password','bizlinks_user_test','bizlinks_password_test','certificate_pem','database_name')
                ->first();

            $address = CompanyAddress::where('company_id', $company_id)
                ->where('type', 1)
                ->select('address', 'district', 'province', 'department','ubigeo')
                ->first();

            $voucher_type = VoucherType::where('reference', $document_voucher_reference)
                ->select('id','name','serie_type','type')
                ->first();

            $currency = Currency::where('id', $document_currency_id)
                ->select('id','name','short_name','symbol')
                ->first();

            $document_type = DocumentType::where('name', $client_document_name)
                ->select('type')
                ->first();

            $query = DB::connection($company->database_name)
                ->table('DetalleFacturacionMarket')
                ->where('TipoDocumento', $document_voucher_reference)
                ->where('NumSerie', $document_serie_number)
                ->where('NumeroDocumento', $document_voucher_number)
                ->where('Estado', 1)
                ->select('Cantidad','PrecioUnitario','ValorVenta','IGV','CodArticulo','PIgv')
                ->get();

            $objs = [];

            foreach ($query as $key => $obj) {
                $article = DB::connection($company->database_name)
                    ->table('MaestroArticulo')
                    ->where('CodArticulo', $obj->CodArticulo)
                    ->select('NombreArticulo','CodUnidad')
                    ->get();

                $unit = Unit::where('reference', $article[0]->CodUnidad)
                    ->select('id','name','short_name')
                    ->first();

                $detail_igv = number_format(abs($obj->ValorVenta) * 0.18, 2, '.', '');
                $detail_price = number_format(abs($obj->ValorVenta) / abs($obj->Cantidad), 4);
                $detail_price_igv = number_format(abs($detail_price) * 1.18, 2);
                $detail_subtotal = number_format(abs($obj->ValorVenta), 2, '.', '');

                $aux = new \stdClass();
                $aux->detail_name = $article[0]->NombreArticulo;
                $aux->detail_igv = $detail_igv;
                $aux->detail_igv_percentage = number_format(number_format($obj->PIgv, 2) * 100, 2, '.', '');
                $aux->detail_price = $detail_price;
                $aux->detail_price_igv = $detail_price_igv;
                $aux->detail_quantity = number_format(abs($obj->Cantidad), 4, '.', '');
                $aux->detail_subtotal = $detail_subtotal;
                $aux->detail_total = number_format($detail_subtotal * 1.18, 2, '.', '');
                $aux->detail_unit_id = ( $unit ? $unit->id: '' );
                $aux->detail_unit_name = ( $unit ? $unit->name : '' );
                $aux->detail_unit_short_name = ( $unit ? $unit->short_name : '' );
                $objs[] = $aux;
            }

            $main_aux = new \stdClass();

            // Datos de la Compañia
            if ( $this->env == 'local' ) {
                $bizlinks_user = $company->bizlinks_user_test;
                $bizlinks_password = $company->bizlinks_password_test;
            } elseif ( $this->env == 'production' ) {
                $bizlinks_user = $company->bizlinks_user;
                $bizlinks_password = $company->bizlinks_password;
            }
            $main_aux->company_address = $address->address;
            $main_aux->company_bizlinks_password = $bizlinks_password;
            $main_aux->company_bizlinks_user = $bizlinks_user;
            $main_aux->company_certificate_pem = $company->certificate_pem;
            $main_aux->company_database_name = $company->database_name;
            $main_aux->company_department = $address->department;
            $main_aux->company_document_number = $company->document_number;
            $main_aux->company_district = $address->district;
            $main_aux->company_id = $company_id;
            $main_aux->company_name = $company->name;
            $main_aux->company_province = $address->province;
            $main_aux->company_short_name = $company->short_name;
            $main_aux->company_ubigeo = $address->ubigeo;

            // Datos del CLiente
            $main_aux->client_address = $client_address;
            $main_aux->client_code = $client_code;
            $main_aux->client_document_name = $client_document_name;
            $main_aux->client_document_number = $client_document_number;
            $main_aux->client_document_type = $document_type->type;
            $main_aux->client_email = $client_email;
            $main_aux->client_name = $client_name;

            // Datos de Cabecera
            $main_aux->document_currency_id = $currency->id;
            $main_aux->document_currency_name = $currency->name;
            $main_aux->document_currency_short_name = $currency->short_name;
            $main_aux->document_currency_symbol = $currency->symbol;
            $main_aux->document_date_of_issue = $document_date_of_issue;
            $main_aux->document_expiration_date = $document_expiration_date;
            $main_aux->document_hour_of_issue = $document_hour_of_issue;
            $main_aux->document_igv = $document_igv;
            $main_aux->document_igv_percentage = $document_igv_percentage;
            $main_aux->document_order_number = $document_order_number;
            $main_aux->document_order_serie = $document_order_serie;
            $main_aux->document_payment_id = $document_payment_id;
            $main_aux->document_payment_name = $document_payment_name;
            $main_aux->document_perception = $document_perception;
            $main_aux->document_perception_percentage = $document_perception_percentage;
            $main_aux->document_reference_number = $document_reference_number;
            $main_aux->document_reference_reason_name = $document_reference_reason_name;
            $main_aux->document_reference_reason_type = $document_reference_reason_type;
            $main_aux->document_reference_serie = $document_reference_serie;
            $main_aux->document_serie = $document_serie;
            $main_aux->document_serie_number = $document_serie_number;
            $main_aux->document_subtotal = $document_subtotal;
            $main_aux->document_total = $document_total;
            $main_aux->document_total_text = NumeroALetras::convertir(str_replace(',', '', $document_total), 'soles');
            $main_aux->document_voucher_id = $voucher_type->id;
            $main_aux->document_voucher_name = $voucher_type->name;
            $main_aux->document_voucher_number = $document_voucher_number;
            $main_aux->document_voucher_reference = $document_voucher_reference;
            $main_aux->document_voucher_serie_type = $voucher_type->serie_type;
            $main_aux->document_voucher_type = $voucher_type->type;
            $main_aux->document_year = date('Y', strtotime($document_date_of_issue));

            // Datos del Detalle
            $main_aux->details = $objs;

            // Datos de Rutas
            $nombre_xml = $company->document_number . '-' . $voucher_type->type . '-' . $document_serie . '-' . $document_voucher_number;
			$nombre_ruta = 'uploads/' . $company->short_name . '/'. date('Y', strtotime($document_date_of_issue));
            $main_aux->nombre_xml = $nombre_xml;
			$main_aux->nombre_ruta = $nombre_ruta;
			$main_aux->nombre_ruta_xml = $nombre_ruta .'/xml/' . $nombre_xml . '.xml';
			$main_aux->nombre_ruta_firma = $nombre_ruta .'/firma/' . $nombre_xml . '.xml';
			$main_aux->nombre_ruta_zip = $nombre_ruta .'/firma/' . $nombre_xml . '.zip';
			$main_aux->nombre_ruta_rspta = $nombre_ruta .'/rpta/R-' . $nombre_xml . '.zip';
			$main_aux->nombre_ruta_pdf = $nombre_ruta .'/pdf/' . $nombre_xml . '.pdf';

            $main_obj[] = $main_aux;

            if ( $task == 'pdf' ) {
                $create_pdf = $this->create_pdf($main_aux);

                $response[] = $create_pdf;
            } elseif ( $task == 'mail' ) {
                $send_mail = $this->send_mail($main_aux);

                $response[] = $send_mail;
            } elseif ( $task == 'save' ) {
                $save_voucher = $this->save_voucher($main_aux);

                $response[] = $save_voucher;
            }
        }

        return $response;
    }

    public function create_pdf(object $obj) {
        if ( $obj->document_voucher_type == '03' ) {
            $xmlfile = Storage::disk('public')->get($obj->nombre_ruta_firma);
            $xml_content = str_replace('ext:', '', $xmlfile);
            $xml_content = str_replace('ds:', '', $xml_content);
            $xml_content = str_replace('cbc:', '', $xml_content);
            $xml_obj = simplexml_load_string($xml_content);

            $document_hash = (string)$xml_obj->UBLExtensions->UBLExtension->ExtensionContent->Signature->SignedInfo->Reference->DigestValue;
            $document_qrcode = base64_encode(QrCode::format('png')->size(100)->generate('| '.$obj->company_document_number.' | '.$obj->document_voucher_type.' | '.$obj->document_serie.'-'.$obj->document_voucher_number.' | '.$obj->document_igv.' | '.number_format($obj->document_total, 2).' | '.$obj->document_date_of_issue.' | '.$obj->client_document_type.' | '.$obj->client_document_number));

            $data = [
                'company_address'					=> $obj->company_address,
                'company_department'				=> $obj->company_department,
                'company_district'					=> $obj->company_district,
                'company_document_number'			=> $obj->company_document_number,
                'company_id'		            	=> $obj->company_id,
                'company_name'						=> $obj->company_name,
                'company_province'					=> $obj->company_province,
                'client_address'					=> $obj->client_address,
                'client_document_name'				=> $obj->client_document_name,
                'client_document_number'			=> $obj->client_document_number,
                'client_email'						=> $obj->client_email,
                'client_name'						=> $obj->client_name,
                'document_currency_name'			=> $obj->document_currency_name,
                'document_currency_symbol'			=> $obj->document_currency_symbol,
                'document_date_of_issue'			=> $obj->document_date_of_issue,
                'document_expiration_date'			=> ($obj->document_expiration_date ? $obj->document_expiration_date : '-'),
                'document_hash'						=> $document_hash,
                'document_igv'						=> number_format($obj->document_igv, 2),
                'document_payment_name'				=> $obj->document_payment_name,
                'document_perception'				=> number_format($obj->document_perception, 2),
                'document_perception_percentage'	=> $obj->document_perception_percentage * 100,
                'document_qrcode'					=> $document_qrcode,
                'document_reference_number'			=> $obj->document_reference_number,
                'document_reference_reason_name'	=> $obj->document_reference_reason_name,
                'document_reference_reason_type'    => $obj->document_reference_reason_type,
                'document_reference_serie'			=> $obj->document_reference_serie,
                'document_subtotal'					=> number_format($obj->document_subtotal, 2),
                'document_total'					=> number_format($obj->document_total, 2),
                'document_total_text'				=> $obj->document_total_text,
                'document_total_perception'			=> number_format($obj->document_total + $obj->document_perception, 2),
                'document_serie'					=> $obj->document_serie,
                'document_voucher_name'				=> $obj->document_voucher_name,
                'document_voucher_number'			=> $obj->document_voucher_number,
                'document_voucher_type'			    => $obj->document_voucher_type,
                'details'							=> $obj->details,
            ];

            $pdf = PDF::loadView('backend.pdf_view', compact('data'));
            if ( !file_exists($obj->nombre_ruta .'/pdf') ) {
                mkdir($obj->nombre_ruta .'/pdf/', 0777, true);
            }
            $pdf->save($obj->nombre_ruta_pdf);
        }

        $zip_name = $obj->nombre_xml.'.zip';
        $xml = $obj->nombre_xml.'.xml';
        $pdf = $obj->nombre_xml.'.pdf';
        $rspta = 'R-'.$obj->nombre_xml.'.zip';

        /*
         * Crear ZIP con XML insertado
         */
        $zipArchive = new \ZipArchive;
        if ($zipArchive->open($zip_name, \ZipArchive::OVERWRITE | \ZipArchive::CREATE) === TRUE) {
            $zipArchive->addFile($obj->nombre_ruta_firma, $xml);
            $zipArchive->addFile($obj->nombre_ruta_pdf, $pdf);
            $zipArchive->addFile($obj->nombre_ruta_rspta, $rspta);
            $zipArchive->close();
        }

        $zipFile = Storage::disk('public')->url($zip_name);

        $response_obj = new \stdClass();
        $response_obj->name = $zip_name;
        $response_obj->file = $zipFile;
        $response_obj->document_serie = $obj->document_serie;
        $response_obj->document_voucher_number = $obj->document_voucher_number;
        $response_obj->response_code = 0;
        $response_obj->response_text = $obj->document_voucher_name.' descargada correctamente';

        return $response_obj;
    }

    public function send_mail(object $obj) {
        if ( $this->env == 'local' ) {
            Mail::to('gabriel@codea.pe')->queue(new VoucherMail($obj));
        } elseif ( $this->env == 'production' ) {
            if ( $obj->document_voucher_type != '03' && $obj->client_email ) {
                Mail::to($obj->client_email)->cc('enviofacturacion@puntodedistribucion.com')->queue(new VoucherMail($obj));
            } else {
                Mail::to('enviofacturacion@puntodedistribucion.com')->queue(new VoucherMail($obj));
            }
        }

        $response_obj = new \stdClass();
        $response_obj->document_serie = $obj->document_serie;
        $response_obj->document_voucher_number = $obj->document_voucher_number;
        $response_obj->response_code = 0;
        $response_obj->response_text = $obj->document_voucher_name.' ha sido enviada por email';

        return $response_obj;
    }

    public function save_voucher(object $obj) {
        $voucher = Voucher::where('company_id', $obj->company_id)
            ->where('voucher_type_id', $obj->document_voucher_id)
            ->where('serie_number', $obj->document_serie)
            ->where('voucher_number', $obj->document_voucher_number)
            ->first();

        if ( $voucher == null || $voucher == '' ) {
            $voucher = new Voucher();
        }

        $client = Client::where('code', $obj->client_code)
            ->select('id', 'business_name')
            ->first();
        
        $original_client_aux = DB::connection($obj->company_database_name)
            ->table('OrdenCompra')
            ->where('AnioOrdenCompra', $obj->document_order_serie)
            ->where('NumeroOrden', $obj->document_order_number)
            ->select('codCliente')
            ->first();
        
        $original_client = Client::where('code', $original_client_aux->codCliente)
            ->select('id')
            ->first();
        
        $client_address = ClientAddress::where('id', $client->id)
            ->where('address_type_id', 1)
            ->select('address')
            ->first();

        $voucher->company_id = $obj->company_id;
        $voucher->client_id = $client->id;
        $voucher->original_client_id = $original_client->id;
        $voucher->client_name = $client->business_name;
        $voucher->client_address = $client_address->address;
        $voucher->voucher_type_id = $obj->document_voucher_id;
        $voucher->serie_number = $obj->document_serie;
        $voucher->voucher_number = $obj->document_voucher_number;
        $voucher->order_series = $obj->document_order_serie;
        $voucher->order_number = $obj->document_order_number;
        $voucher->issue_date = $obj->document_date_of_issue;
        $voucher->issue_hour = $obj->document_hour_of_issue;
        $voucher->expiry_date = $obj->document_expiration_date;
        $voucher->currency_id = $obj->document_currency_id;
        $voucher->payment_id = $obj->document_payment_id;
        $voucher->taxed_operation = $obj->document_subtotal;
        $voucher->unaffected_operation = 0;
        $voucher->exonerated_operation = 0;
        $voucher->igv = $obj->document_igv;
        $voucher->total = $obj->document_total;
        $voucher->igv_perception = $obj->document_perception;
        $voucher->total_perception = $obj->document_total + $obj->document_perception;
        $voucher->igv_percentage = $obj->document_igv_percentage;
        $voucher->igv_perception_percentage = $obj->document_perception_percentage;
        $voucher->ose = 1;
        $voucher->user = Auth::user()->user;
        $voucher->save();

        foreach ($obj->details as $detail) {
            $count = VoucherDetail::where('voucher_id', $voucher->id)->count();
            
            if ( $count != 0 ) {
                $voucher_detail = VoucherDetail::where('voucher_id', $voucher->id)->delete();
            }

            $original_price = DB::connection($obj->company_database_name)
                ->table('DetalleOrdenCompra')
                ->where('AnioOrdenCompra', $voucher->order_series)
                ->where('NumeroOrden', $voucher->order_number)
                ->select('Precio')
                ->first();

            $voucher_detail = new VoucherDetail();
            $voucher_detail->voucher_id = $voucher->id;
            $voucher_detail->unit_id = $detail->detail_unit_id;
            $voucher_detail->name = $detail->detail_name;
            $voucher_detail->quantity = $detail->detail_quantity;
            $voucher_detail->original_price = $original_price->Precio;
            $voucher_detail->unit_price = $detail->detail_price;
            $voucher_detail->sale_value = $detail->detail_price_igv;
            $voucher_detail->exonerated_value = 0;
            $voucher_detail->inaccurate_value = 0;
            $voucher_detail->igv = $detail->detail_igv;
            $voucher_detail->total = $detail->detail_total;
            $voucher_detail->user = Auth::user()->user;
            $voucher_detail->save();
        }

        // $response_obj = new \stdClass();
        // $response_obj->document_serie = $obj->document_serie;
        // $response_obj->document_voucher_number = $obj->document_voucher_number;
        // $response_obj->response_code = 0;
        // $response_obj->response_text = 'Documento guardado correctamente' . $voucher->id;

        // return $response_obj;
    }

    public function test() {
        $companies = Company::all();

        dd($companies);
    }
}
